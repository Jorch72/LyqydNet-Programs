oldfs = {}

for k, v in pairs(fs) do
	oldfs[k] = v
end

oldioOpen = io.open

newfs = {}

newfs.list = function(path)
	if string.find(path, "^/?remote/") then
		local serverConn = connection.open(string.match(path, "^/?remote/(%w+)/?"), 21, 2)
		if not serverConn then return {} end
		local lsString = "ls"
		local remotePath = string.match(path, "^/?remote/%w+/(.*)")
		if remotePath then lsString = lsString.." "..remotePath end
		connection.send(serverConn, "fileList", lsString)
		local messRcvd = false
		local result = {}
		while not messRcvd do
			local messType, message = connection.awaitResponse(serverConn, 2)
			if messType == "data" then
				message = string.sub(message, 3)
				for s in string.gmatch(message, "(.-);") do
					table.insert(result, s)
				end
			elseif messType == "done" then
				messRcvd = true
			end
		end
		connection.close(serverConn)
		return result
	end
	return oldfs.list(path)
end

newfs.exists = function(path)
	if string.find(path, "^/?remote/") then
		local serverConn = connection.open(string.match(path, "^/?remote/(%w+)/"), 21, 2)
		if not serverConn then return false end
		connection.send(serverConn, "fileStatus", string.match(path, "^/?remote/%w+/(.*)"))
		local dataRcvd = false
		local ExistsValue = false
		while not dataRcvd do
			local messType, message = connection.awaitResponse(serverConn, 2)
			if messType then
				if messType == "fileInformation" then
					if string.find(message, "e;") then ExistsValue = true end
				elseif messType == "done" then
					dataRcvd = true
				end
			else
				connection.close(serverConn)
				return false
			end
		end
		connection.close(serverConn)
		return ExistsValue
	else
		return oldfs.exists(path)
	end
end

newfs.isDir = function(path)
	if string.find(path, "^/?remote/") then
		if string.find(path, "^/?remote/%w+/?(%w+)") == nil then
			local serverConn = connection.open(string.match(path,  "^/?remote/(%w+)/"), 21, 2)
			if serverConn then
				connection.close(serverConn)
				return true
			else
				return false
			end
		else
			local serverConn = connection.open(string.match(path, "^/?remote/(%w+)/"), 21, 2)
			if not serverConn then return false end
			connection.send(serverConn, "fileStatus", string.match(path, "^/?remote/%w+/(.*)"))
			local dataRcvd = false
			local isDirValue = false
			while not dataRcvd do
				local messType, message = connection.awaitResponse(serverConn, 2)
				if messType then
					if messType == "fileInformation" then
						if string.find(message, "d;") then isDirValue = true end
					elseif messType == "done" then
						dataRcvd = true
					end
				else
					connection.close(serverConn)
					return false
				end
			end
			connection.close(serverConn)
			return isDirValue
		end
	else
		return oldfs.isDir(path)
	end
end

newfs.isReadOnly = function(path)
	if string.find(path, "^/?remote/") then
		local serverConn = connection.open(string.match(path, "^/?remote/(%w+)/"), 21, 2)
		if not serverConn then return false end
		connection.send(serverConn, "fileStatus", string.match(path, "^/?remote/%w+/(.*)"))
		local dataRcvd = false
		local isReadOnlyValue = false
		while not dataRcvd do
			local messType, message = connection.awaitResponse(serverConn, 2)
			if messType then
				if messType == "fileInformation" then
					if string.find(message, "r;") then isReadOnlyValue = true end
				elseif messType == "done" then
					dataRcvd = true
				end
			else
				connection.close(serverConn)
				return false
			end
		end
		connection.close(serverConn)
		return isReadOnlyValue
	else
		return oldfs.isReadOnly(path)
	end
end

newfs.getName = function(path)
	if string.find(path, "^/?remote/") then
		return string.match(path, "/%w+$")
	else
		return oldfs.getName(path)
	end
end

newfs.getDrive = function(path)
	if string.find(path, "^/?remote/") then
		return "remote"
	else
		return oldfs.getDrive(path)
	end
end

newfs.getSize = function(path)
	if string.find(path, "^/?remote/") then
		local serverConn = connection.open(string.match(path, "^/?remote/(%w+)/"), 21, 2)
		if not serverConn then return nil end
		connection.send(serverConn, "fileStatus", string.match(path, "^/?remote/%w+/(.*)"))
		local messType, message = connection.awaitResponse(serverConn, 2)
		connection.close(serverConn)
		if messType then
			return tonumber(string.match(message, "s;(.*)"))
		else
			return nil
		end
	else
		return oldfs.getSize(path)
	end
end

newfs.makeDir = function(path)
	if string.find(path, "^/?remote/") then
		local dirPath = string.match(path, "^/?remote/%w+/(.*)")
		if not dirPath then return nil end
		local serverConn = connection.open(string.match(path, "^/?remote/(%w+)/"), 21, 2)
		if not serverConn then return nil end
		connection.send(serverConn, "fileMakeDirectory", dirPath)
		connection.close(serverConn)
		return nil
	else
		return oldfs.makeDir(path)
	end
end

newfs.move = function(source, dest)
	if string.find(source, "^/?remote/") then
		local serverConn = connection.open(string.match(source, "^/?remote/(%w+)/"), 21, 2)
		if not serverConn then return nil end
		if not netfile.get(serverConn, string.match(source, "^/?remote/%w+/(.*)"), ".remote/"..string.match(source, "^/?remote/(.*)"), 2) then return nil end
		connection.close(serverConn)
		if not fs.exists(".remote/"..string.match(source, "^/?remote/(.*)/%w+$")) then fs.makeDir(".remote/"..string.match(source, "^/?remote/(.*)/%w+$")) end
		source = ".remote/"..string.match(source, "^/?remote/(.*)")
	end
	if string.find(dest, "^/?remote/") then
		if not fs.exists(".remote/"..string.match(dest, "^/?remote/(.*)/%w+$")) then fs.makeDir(".remote/"..string.match(dest, "^/?remote/(.*)/%w+$")) end
		dest = ".remote/"..string.match(dest, "^/?remote/(.*)")

	end
	oldfs.move(source, dest)
		--operate on remote files before calling oldfs equivalent
	if string.find(source, "^.remote/") then
		local serverConn = connection.open(string.match(dest, "^.remote/(%w+)/"), 21, 2)
		connection.send(serverConn, "fileDelete", string.match(dest, "^.remote/%w+/(.*)"))
		connection.close(serverConn)
		oldfs.delete(source)
	end
	if string.find(dest, "^.remote/") then
		local serverConn = connection.open(string.match(dest, "^.remote/(%w+)/"), 21, 2)
		netfile.put(serverConn, dest, string.match(dest, "^.remote/%w+/(.*)"), 2)
		connection.close(serverConn)
		oldfs.delete(dest)
	end
end

newfs.copy = function(source, dest)
	if string.find(source, "^/?remote/") then
		local serverConn = connection.open(string.match(source, "^/?remote/(%w+)/"), 21, 2)
		if not serverConn then return nil end
		if not netfile.get(serverConn, string.match(source, "^/?remote/%w+/(.*)"), ".remote/"..string.match(source, "^/?remote/(.*)"), 2) then return nil end
		connection.close(serverConn)
		if not fs.exists(".remote/"..string.match(source, "^/?remote/(.*)/%w+$")) then fs.makeDir(".remote/"..string.match(source, "^/?remote/(.*)/%w+$")) end
		source = ".remote/"..string.match(source, "^/?remote/(.*)")
	end
	if string.find(dest, "^/?remote/") then
		if not fs.exists(".remote/"..string.match(dest, "^/?remote/(.*)/%w+$")) then fs.makeDir(".remote/"..string.match(dest, "^/?remote/(.*)/%w+$")) end
		dest = ".remote/"..string.match(dest, "^/?remote/(.*)")
	end
	oldfs.copy(source, dest)
		--operate on remote files before calling oldfs equivalent
	if string.find(source, "^.remote/") then
		oldfs.delete(source)
	end
	if string.find(dest, "^.remote/") then
		local serverConn = connection.open(string.match(dest, "^.remote/(%w+)/"), 21, 2)
		netfile.put(serverConn, dest, string.match(dest, "^.remote/%w+/(.*)"), 2)
		connection.close(serverConn)
		oldfs.delete(dest)
	end
end

for k, v in pairs(newfs) do
	fs[k] = v
end

newOpen = function (path, _mode )
	local isRemote = false
	if not string.find(path, "^/?remote/") then
		return oldioOpen(path, _mode)
	end
	isRemote = true
	local serverConn = connection.open(string.match(path, "^/?remote/(%w+)/"), 21, 2)
	if not serverConn then return nil end
	if not fs.exists(".remote/"..string.match(path, "^/?remote/(.*)/%w+$")) then fs.makeDir(".remote/"..string.match(path, "^/?remote/(.*)/%w+$")) end
	if not netfile.get(serverConn, string.match(path, "^/?remote/%w+/(.*)"), ".remote/"..string.match(path, "^/?remote/(.*)"), 2) then return nil end
	connection.awaitResponse(serverConn)
	connection.close(serverConn)
	path = ".remote/"..string.match(path, "^/?remote/(.*)")
	local mode = _mode or "r"
	local file = fs.open( path, mode )
	if not file then
		return nil
	end
	local fileTable = {}
	fileTable.bFileHandle = true
	fileTable.bClosed = false
	if isRemote then fileTable.path = path end
	if mode == "r" then
		if isRemote then
			fileTable.close = function(self)
				file.close()
				fs.delete(self.path)
				self.bClosed = true
			end
		else
			fileTable.close = function(self)
				file.close()
				self.bClosed = true
			end
		end
		fileTable.read = function( self, _format )
			local format = _format or "*l"
			if format == "*l" then
				return file.readLine()
			elseif format == "*a" then
				return file.readAll()
			else
				error( "Unsupported format" )
			end
			return nil
		end
		fileTable.lines = function(self)
			return function()
				local sLine = file.readLine()
				if sLine == nil then
					self.close()
				end
				return sLine
			end
		end
	elseif mode == "w" or mode == "a" then
		if isRemote then				
			fileTable.close = function(self)
				file.close()
				local serverConn = connection.open(string.match(self.path, "^.remote/(%w+)/"), 21, 2)
				if serverConn then
					netfile.put(serverConn, self.path, string.match(self.path, "^.remote/%w+/(.*)"), 2)
					connection.close(serverConn)
					fs.delete(self.path)
				end
				self.bClosed = true
			end
		else
			fileTable.close = function(self)
				file.close()
				self.bClosed = true
			end
		end
		fileTable.write = function( self, _sText )
			file.write( _sText )
		end	
	elseif mode == "rb" then
		if isRemote then
			fileTable.close = function(self)
				file.close()
				fs.delete(self.path)
				self.bClosed = true
			end
		else				
			fileTable.close = function(self)
				file.close()
				self.bClosed = true
			end
		end
		fileTable.read = function(self)
			return file.read()
		end		
	elseif mode == "wb" or mode == "ab" then
		if isRemote then
			fileTable.close = function(self)
				file.close()
				local serverConn = connection.open(string.match(self.path, "^.remote/(%w+)/"), 21, 2)
				if serverConn then
					netfile.put(serverConn, self.path, string.match(self.path, "^.remote/%w+/(.*)"), 2)
					connection.close(serverConn)
					fs.delete(self.path)
				end
				self.bClosed = true
			end
		else		
			filetable.close = function(self)
				file.close()
				self.bClosed = true
			end
		end
		filetable.write = function( self, _number )
			file.write( _number )
		end
	else
		file.close()
		error( "Unsupported mode" )	
	end
	return fileTable
end

rawset(io, "open", newOpen)


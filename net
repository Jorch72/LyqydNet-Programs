local tArgs = { ... }
if tArgs[1] == "route" then
	--routes stuff
	if tArgs[2] == "print" then
		for rId, rInfo in pairs(net.routeTable) do
			print(rId..": "..rInfo.name.." ("..rInfo.gateway..":"..rInfo.cost..")")
		end
	elseif tArgs[2] == "flush" then
		net.routeTable = {}
		return net.netInit()
	end

elseif tArgs[1] == "shell" and #tArgs == 2 then
	local serverConnection, remoteDir = connection.open(tArgs[2], 23, 10)
	if not serverConnection then
		print("Connection Failed")
		return
	end
	--connect to a server.
	local tNetShellHistory = {}
	remoteDir = "/"
	local nsExit = false
	while not nsExit do
		write(  remoteDir.. "> " )

		local sLine = read( nil, tNetShellHistory )
		table.insert( tNetShellHistory, sLine )
		remoteCommand = string.match(sLine, "(%w+)[ 	]")
		if sLine ~= "exit" then
			connection.send(serverConnection, "data", sLine)
			if remoteCommand == "edit" then
				netfile.receive(serverConnection, "/etc/tmp")
				shell.run("rom/programs/edit", "/etc/tmp")
				netfile.send(serverConnection, "/etc/tmp")
				fs.delete("/etc/tmp")
			end
			local messType, message = nil, nil
			while messType ~= "done" do
				messType, message = connection.awaitResponse(serverConnection)
				if messType == "close" then
					print("Connection closed by server.")
					return
				elseif string.sub(messType, 1, 4) == "text" then
					connection.processText(serverConnection, messType, message)
				else
				end
			end
			remoteDir = message
		else
			connection.close(serverConnection)
			print("Disconnected.")
			nsExit = true
		end
	end

else
	print("Usage: net route <print|flush>")
	print("       net shell <servername>")
end
tArgs = {...}
if #tArgs == 0 then
	print("Usage: progname <server>")
	return false
end

--serverConn = connection.open(tArgs[1], matd, 10)
--if not serverConn then return false end

local function parseAttributes (attrString)
	attrTable = {}
	for t, s in string.gmatch(attrString, "(%a+)>(.-);") do
		newAttribute = {}
		if t == "drop" or t == "fill" then
			x, z, y, xDir, zDir = string.match(s, "(%-?%d+),(%-?%d+),(%d+),(%-?[01]),(%-?[01])")
			newAttribute = {type = t, loc = location.new(x, y, z), orientation = location.getOrientation(xDir, zDir)}
			if t == "fill" then newAttribute.side = string.match(s, ",(%a+)") end
		elseif t == "source" then
			newAttribute = {type = t, server = s}
		end
		table.insert(attrTable, newAttribute)
	end
	return attrTable
end

nodeTable = {}
inventoryTable = {}
for i=1,9 do
	if turtle.getItemCount(i) == 0 then
		inventoryTable[i] = "empty"
	else
		inventoryTable[i] = "unknown"
	end
end


local function loadNodeTable ()
	if fs.exists( "etc/nodes" ) then
		local file = io.open( "etc/nodes", "r" )
		local sLine = file:read()
		while sLine do
			nodeType = string.match(sLine, "node:(%a+)>")
			if nodeType ~= "space" then newNode = {type = nodeType} end
			if nodeType == "space" then
				local xmin, zmin, ymin, xmax, zmax, ymax, negtravel, postravel = string.match(sLine, "node:space>(%-?%d+),(%d+),(%-?%d+),(%-?%d+),(%d+),(%-?%d+);travel>(%d+),(%d+);")
				nodeTable.space = {min = location.new(xmin, ymin, zmin), max = location.new(xmax, ymax, zmax)}
				nodeTable.travel = {neg = negtravel, pos = postravel}
			elseif nodeType == "craft" then
				local quan, crafted, craftstring = string.match(sLine, "node:craft>(%d+)%.([%a_]+)=(.-);")
				newNode.craft = {item = crafted, quantity = quan}
				local ingredCount = 0
				for q, i in string.gmatch(craftstring, "(%d+)%.([%a_]+),") do
					local ingredientTable = {quantity = q, ingredient = i}
					ingredCount = ingredCount + 1
					table.insert(newNode.craft, ingredientTable)
				end
				newNode.craft.ingredients = ingredCount 
				newNode.attributes = parseAttributes(string.match(sLine, "node:craft>%d+%.[%a_]+=.-;(.+;)"))
			elseif nodeType == "smelter" then
				smeltstring = string,match(sLine, "node:smelter>(.-);")
				for p, i in string.gmatch(smeltstring, "([%a_]+)=([%a_]+)") do
					local smeltTable = {product = p, ingredient = i}
					table.insert(newNode.smelt)
				end
				newNode.attributes = parseAttributes(string.match(sLine, "node:smelter>.-;(.+;)"))
			elseif nodeType == "storage" or nodeType == "supply" then
				newNode.item = string.match(sLine, "node:%a+>([%a_]+);")
				newNode.attributes = parseAttributes(string.match(sLine, "node:%a+>[%a_]+;(.+;)"))
			elseif nodeType == "idle" then
				local newNode = {}
				local x, z, y = string.match(sLine, "node:idle>(%-?%d+),(%-?%d+),(%d+);")
				newNode.loc = location.new(x, y, z)
			end
			if nodeType ~= "space" then table.insert(nodeTable, newNode) end
			sLine = file:read()
		end
		file:close()
	else
		return false
	end
	return true
end

local function orient(loc, head)
	while loc.h ~= head do
		if loc.h > head and (loc.h ~= 4 and head ~= 1) then
			loc:right(loc)
		else
			loc = location.left(loc)
		end
	end
	return loc
end

local function orientAndHeight(loc, head)
	loc = orient(loc, head)
	if loc.y ~= nodeTable.travel.pos and loc.h > 2 then
		while loc.y ~= nodeTable.travel.pos do
			if loc.y - nodeTabel.travel.pos < 0 then
				if turtle.up() then loc.y = loc.y + 1 end
			else
				if turtle.down() then loc.y = loc.y - 1 end
			end
		end
	elseif loc.y ~= nodeTable.travel.neg and loc.h < 3 then
		while loc.y ~= nodeTable.travel.neg do
			if loc.y - nodeTabel.travel.neg < 0 then
				if turtle.up() then loc.y = loc.y + 1 end
			else
				if turtle.down() then loc.y = loc.y - 1 end
			end
		end
	end
	return loc
end

local function moveTo (moveLoc, loc)
	while loc.x ~= moveLoc.x or loc.z ~= moveLoc.z do
		if math.abs(moveLoc.x - loc.x) > math.abs(moveLoc.z - loc.z) then
			magnitude = math.abs(moveLoc.x - loc.x)
			moveX = moveLoc.x - loc.x / math.abs(moveLoc.x - loc.x)
			moveZ = 0
		else
			magnitude = math.abs(moveLoc.z - loc.z)
			moveZ = moveLoc.z - loc.z / math.abs(moveLoc.z - loc.z)
			moveX = 0
		end
		orient = location.getOrientation(moveX, moveZ)
		loc = orientAndHeight(loc, orient)
		while magnitude > 0 do
			if turtle.forward() then
				loc.x = loc.x + moveX
				loc.z = loc.z + moveZ
				magnitude = magnitude - 1
			else
				if loc.h % 2 == 0 then
					turtle.turnLeft()
					if turtle.forward() then
						loc.x = loc.x + moveZ
						loc.z = loc.z + moveX
					end
					turtle.turnRight()
				else
					turtle.turnRight()
					if turtle.forward() then
						loc.x = loc.x + moveZ
						loc.z = loc.z + moveX
					end
					turtle.turnLeft()
				end
			end
		end
	end
	while loc.y ~= moveLoc.y do
		deltaY = moveLoc.y - loc.y
		if deltaY > 0 then
			if turtle.up() then
				loc.y = loc.y + 1
			end
		else
			if turtle.down() then
				loc.y = loc.y - 1
			end
		end
	end
	return orient(loc, moveLoc.h)
end

local function requestIdleNode()
	connection.send(serverConn, "data", "idle")
	messType, message = connection.awaitResponse(serverConn, 2)
	if messType then
		if messType == "data" then return message end
	else
		return false
	end
end

local function lockNode(node)
	connection.send(serverConn, "data", "lock:"..node)
	messType, message = connection.awaitResponse(serverConn, 2)
	if messType then
		if messType == "data" then
			if message == "ok" then
				return true
			elseif message == "busy" then
				idle = requestIdleNode()
				if idle then moveTo(idle) end
				nodeAvailable = false
				while not nodeAvailable do
					sleep(30)
					connection.send(serverConn, "data", "lock:"..node)
					messType, message = connection.awaitResponse(serverConn, 2)
					if messType then
						if messType == "data" and message == "ok" then nodeAvailable = true end
					end
				end
				return true
			end
		end
	else
		return false
	end
end

local function unlockNode(node)
	connection.send(serverConn, "data", "unlock:"..node)
	messType, message = connection.awaitResponse(serverConn, 2)
	if messType then
		if messType == "data" and message == "ok" then return true end
	else
		return false
	end
end

local function getSmelter()
	connection.send(serverConn, "data", "smelt")
	messType, message = connection.awaitResponse(serverConn, 2)
	if messType then
		if messType == "data" and message ~= "idle" then return message end
	else
		return false
	end
end

local function canGet(item)
	for nNum, nInfo in ipairs(nodeTable) do
		if nInfo.type == "craft" then
			if nInfo.item == item then
				for iNum, iInfo in ipairs(nodeTable[nNum].craft) do
					if not canGet(iInfo.ingredient) then return false end
				end
			end
		elseif nInfo.type == "smelter" then
			for sNum, sInfo in ipairs(nodeTable[nNum].smelt) do
				if sInfo.product == item then
					if not canGet(sInfo.ingredient) then return false end
				end
			end
		elseif nInfo.type == "storage" or nInfo.type == "supply" then
			if nInfo.item == item then return true end
		end
	end
end

local function isRoom(quantity)
	local total = 0
	for i=1,9 do
		if inventoryTable[i] == "empty" or inventoryTable == item then total = total + turtle.getItemSpace(i) end
	end
	if quantity > total then return false else return true end
end

local function totalHold(item)
	total = 0
	for i=1,9 do
		if inventoryTable[i] == item then total = total + turtle.getItemCount() end
	end
	return total
end

local function setSlots(item, quantity)
	total = 0
	for i=1,9 do
		if total >= quantity then return true end
		if inventoryTable[i] == item or inventoryTable[i] == "empty" then
			total = total + turtle.getItemSpace(i)
			inventoryTable[i] = item
		end
	end
	return total
end

local function fillItem(node, item, quantity)
	nodeLoc = nil
	for aNum, aInfo in ipairs(nodeTable[node].attributes) do
		if aInfo.type == "fill" then
			nodeLoc = aInfo.loc
			fillSide = aInfo.side
		end
	end
	if nodeLoc and lockNode(nNum) then moveTo(nodeLoc, loc) end
	if not isRoom(quantity) then return false end
	setSlots(item, quantity)
	redstone.setOutput(fillSide, true)
	while totalHold(item) < quantity - 8 do
		sleep(5)
	end
	redstone.setOutput(fillSide, false)
	sleep(10)
	if totalHold(item) < quantity then
		redstone.setOutput(fillSide, true)
		sleep(quantity - totalHold(item))
		redstone.setOutput(fillSide, false)
	end
	return unlockNode(node)
end

local function dropItem(node, item, quantity)
	nodeLoc = nil
	for aNum, aInfo in ipairs(nodeTable[node].attributes) do
		if aInfo.type == "drop" then nodeLoc = aInfo.loc end
	end
	if nodeLoc then
		moveTo(nodeLoc, loc)
		total = 0
		for i=1,9 do
			if inventoryTable[i] == item then
				turtle.select(i)
				if total + turtle.getItemCount > quantity then
					turtle.drop(quantity - total)
				else
					turtle.drop()
				end
				if turtle.getItemCount(i) == 0 then
					inventoryTable[i] = "empty"
				end
			end
		end
	else
		return false
	end
end

local function getItem(item, quantity)
	itemSmelt = false
	for nNum, nInfo in ipairs(nodeTable) do
		if nInfo.type == "craft" then
			if nInfo.item == item then
				for iNum, iInfo in ipairs(nodeTable[nNum].craft) do
					getItem(iInfo.ingredient, math.ceil(quantity / nodeTable[nNum].craft.quantity) * iInfo.quantity)
				end
				lockNode(nNum)
				while quantity > 63 do
					for iNum, iInfo in ipairs(nodeTable[nNum].craft) do
						dropItem(nNum, iInfo.ingredient, math.ceil(63 / nodeTable[nNum].craft.quantity) * iInfo.quantity)
					end
					fillItem(nNum, item, 63)
					quantity = quantity - 63
				end
				for iNum, iInfo in ipairs(nodeTable[nNum].craft) do
					dropItem(nNum, iInfo.ingredient, math.ceil(quantity / nodeTable[nNum].craft.quantity) * iInfo.quantity)
				end
				return fillItem(nNum, item, quantity)
			end
		elseif nInfo.type == "smelter" then
			for sNum, sInfo in ipairs(nodeTable[nNum].craft) do
				if sInfo.product == item then
					itemSmelt = true
					break
				end
			end
			if itemSmelt then
				getItem(sInfo.ingredient, math.ceil(quantity / 8) * 8)
				getItem("coal", math.ceil(quantity / 8))
				smeltNode = getSmelter()
				if smeltNode and smeltNode ~= "idle" then
					while quantity > 64 do
						dropItem(smeltNode, sInfo.ingredient, 64)
						dropItem(smeltNode, "coal", 8)
						sleep(320)
						fillItem(smeltNode, item, 64)
						quantity = quantity - 64
					end
					dropItem(smeltNode, sInfo.ingredient, quantity)
					dropItem(smeltNode, "coal", math.ceil(quantity / 8))
					sleep(quantity * 5)
					return fillItem(smeltNode, item, quantity)
				else return false end
			end
		elseif nInfo.type == "storage" or nInfo.type == "supply" then
			return fillItem(nNum, item, quantity)
		end
	end
end

local function main()
	if not loadNodeTable() then
		connection.send(serverConn, "data", "nodelist")
		if not netfile.receive(serverConn, "etc/nodes", 2) or not loadNodeTable() then
			return false
		end
	end
	loc1  = vector.new(lygps.locate(2, false))
	turtle.forward()
	loc2 = vector.new(lygps.locate(2, false))
	heading = loc2 - loc1
	turtle.back()
	loc = location.new(loc1.x, loc1.y, loc1.z, location.getOrientation(heading.x, heading.z))
	while true do
		messType, message = connection.awaitResponse(serverConn)
		if messType == "data" then
			destination, material, quantity = string.match(message, "(%-?%d+,%d+,%-?%d+);([%a_]+),(%d+)")
			if canGet(material) then
				if getItem(material, quantity) then
					lockNode(destination)
					dropItem(destination, material, quantity)
					unlockNode(destination)
				end
				idle = requestIdleNode()
				if idle then moveTo(idle) else return false end
			end
		end
	end
end

main()
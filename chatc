local tArgs = {...}
local connectedUsers = {}

local function chatread( _sReplaceChar, _tHistory )	
	term.setCursorBlink( true )

	local sLine = ""
	local nHistoryPos = nil
	local nPos = 0
	if _sReplaceChar then
		_sReplaceChar = string.sub( _sReplaceChar, 1, 1 )
	end
	
	local foo = 0
	local w, h = term.getSize()
	local sx, sy = term.getCursorPos()	
	local function redraw()
		local nScroll = 0
		if sx + nPos >= w then
			nScroll = (sx + nPos) - w
		end
			
		term.setCursorPos( sx, sy )
		term.write( string.rep(" ", w - sx + 1) )
		term.setCursorPos( sx, sy )
		if _sReplaceChar then
			term.write( string.rep(_sReplaceChar, string.len(sLine) - nScroll) )
		else
			term.write( string.sub( sLine, nScroll + 1 ) )
		end
		term.setCursorPos( sx + nPos - nScroll, sy )
	end
	
	while true do
		local sEvent, param, param2, param3 = os.pullEvent()
		if sEvent == "char" then
			sLine = string.sub( sLine, 1, nPos ) .. param .. string.sub( sLine, nPos + 1 )
			nPos = nPos + 1
			redraw()
			
		elseif sEvent == "key" then
			if param == 28 then
				-- Enter
				break
				
			elseif param == 203 then
				-- Left
				if nPos > 0 then
					nPos = nPos - 1
					redraw()
				end
				
			elseif param == 205 then
				-- Right				
				if nPos < string.len(sLine) then
					nPos = nPos + 1
					redraw()
				end
			
			elseif param == 200 or param == 208 then
				-- Up or down
				if _tHistory then
					if param == 200 then
						-- Up
						if nHistoryPos == nil then
							if #_tHistory > 0 then
								nHistoryPos = #_tHistory
							end
						elseif nHistoryPos > 1 then
							nHistoryPos = nHistoryPos - 1
						end
					else
						-- Down
						if nHistoryPos == #_tHistory then
							nHistoryPos = nil
						elseif nHistoryPos ~= nil then
							nHistoryPos = nHistoryPos + 1
						end						
					end
					
					if nHistoryPos then
						sLine = _tHistory[nHistoryPos]
						nPos = string.len( sLine ) 
					else
						sLine = ""
						nPos = 0
					end
					redraw()
				end
			elseif param == 14 then
				-- Backspace
				if nPos > 0 then
					sLine = string.sub( sLine, 1, nPos - 1 ) .. string.sub( sLine, nPos + 1 )
					nPos = nPos - 1					
					redraw()
				end
			elseif param == 199 then
				--home
				if nPos > 0 then
					nPos = 0
					redraw()
				end					   
			elseif param == 207 then
				--end							   
				if nPos < string.len(sLine) then
					nPos = string.len(sLine)
					redraw()
				end
			elseif param == 211 then
				--delete
				if nPos >= 0 and nPos < string.len(sLine) then
					if nPos == 0 then
						sLine = string.sub( sLine, 2)
					else
						sLine = string.sub( sLine, 1, nPos ) .. string.sub( sLine, nPos + 2 )
					end
					redraw()
				end
			end
		elseif sEvent == "rednet_message" then
			local wX, wY = term.getCursorPos()
			term.setCursorPos(pX, pY)
			term.setCursorBlink(false)
			routeNum, pType, packetData = net.rednet_message(param, param2, param3)
			pX, pY = term.getCursorPos()
			term.setCursorPos(wX, wY)
			term.setCursorBlink(true)
			redraw()
		end
	end
	
	term.setCursorBlink(false)
	return sLine
end

function processResponse(pType, message)
	while true do
		_, pType, message = coroutine.yield()
		message = string.match(message, "%d+,%d+;(.*)")
		if pType == "SC" then
			print("Connection closed by server.")
			connection.close(serverConnection, "disconnect", true)
		elseif pType == "SP" then
			if string.sub(message, 1, 2) == "p;" then
				message = string.match(message, ";(.*)")
				if message ~= "\n" then print(message) end
			elseif string.sub(message, 1, 2) == "c;" then
				message = string.sub(message, 3)
				local commandReceived = string.match(message, "^(%w+),?")
				if commandReceived == "kicked" or commandReceived == "banned" or commandReceived == "disconnected" then
					local userName = string.match(message, ",(%w+)")
					for uNum, uInfo in ipairs(connectedUsers) do
						if uInfo.name == userName then
							table.remove(connectedUsers, uNum)
							break
						end
					end
					if commandReceived == "kicked" then
						print("User "..userName.." was kicked.")
					elseif commandReceived == "banned" then
						print("User "..userName.." was banned.")
					elseif commandReceived == "disconnected" then
						print("User "..userName.." disconnceted.")
					end
				elseif commandReceived == "passwordUpdate" then
					print("Password Updated!")
				elseif commandReceived == "loginFailed" then
					print("Login Failed!")
				elseif commandReceived == "alreadyLoggedIn" then
					print("Already logged in!")
				elseif commandReceived == "nameTaken" then
					print("User name "..string.match(message, ",(%w+)").." already taken!")
				elseif commandReceived == "connected" then
					local us = false
					if lastCommand then
						if string.match(tChatHistory[#tChatHistory], "/(%a+) ") == "login" or string.match(tChatHistory[#tChatHistory], "/(%a+) ") == "register" then
							if string.match(tChatHistory[#tChatHistory], "/%a+ (%w+)") == string.match(message, ",(%w+),") then
								print("Connected as "..string.match(message, ",(%w+),")..".")
								us = true
							end
						end
					end
					if not us then
						print("User "..string.match(message, ",(%w+),").." connected.")
					end
					local user = {}
					user.name = string.match(message, ",(%w+),")
					user.mode = string.match(message, ",(%w+)$")
					table.insert(connectedUsers, user)
				elseif commandReceived == "mode" then
					local userName = string.match(message, ",(%w+),")
					for uNum, uInfo in ipairs(connectedUsers) do
						if uInfo.name == userName then
							uInfo.mode = string.match(message, ",(%w+)$")
							break
						end
					end
				elseif commandReceived == "usersOnline" then
					userString = string.match(message, "usersOnline,(.*)")
					for uName, uMode in string.gmatch(userString, "(%w+),(%w+);") do
						local user = {}
						user.name = uName
						user.mode = uMode
						table.insert(connectedUsers, user)
					end
				end
			end
		end
	end
end

pX, pY = 1, 1
local tChatHistory = {}
local serverConnection = false
local lastCommand = false
if tArgs[1] then
	serverConnection = connection.open(tArgs[1], 18, 2)
	if not serverConnection then
		print("Connection Failed!")
	else
		print("Connected to "..tArgs[1]..".")
		net.daemonAdd("chatPrint", processResponse, connection.connectionTable[serverConnection].localport)
	end
end
term.clear()
local x, y = term.getSize()
term.setCursorPos(1, y)
while true do
	term.setCursorPos(1, y)
	term.clearLine()
	if serverConnection then write("> ") else write("chatc: ") end
	local sLine = chatread(nil, tChatHistory)
	lastCommand = false
	table.insert( tChatHistory, sLine )
	if string.sub(sLine, 1, 1) == "/" then
		lastCommand = sLine
	end
	connection.send(serverConnection, "data", sLine)
end
